"""
Chatbot Vendedor - IA conversacional com hist√≥rico
Usa GitHub Copilot para responder mensagens de vendedores
"""
import os
import json
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

try:
    from transcription.copilot_client import GitHubCopilotClient
except ImportError:
    GitHubCopilotClient = None

try:
    import openai
except ImportError:
    openai = None


class VendedorChatbot:
    """Chatbot para vendedores com hist√≥rico de conversa."""
    
    def __init__(self, github_token: Optional[str] = None):
        """Inicializar chatbot."""
        self.github_token = github_token or os.getenv('GITHUB_TOKEN')
        self.conversations_dir = Path('conversations')
        self.conversations_dir.mkdir(exist_ok=True)
        
        # Inicializar client de IA
        self.ai_client = None
        try:
            if GitHubCopilotClient:
                self.ai_client = GitHubCopilotClient(self.github_token)
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso ao inicializar GitHub Copilot: {e}")
    
    def get_conversation_file(self, user_phone: str) -> Path:
        """Obter caminho do arquivo de hist√≥rico do usu√°rio."""
        # Limpar telefone para nome de arquivo
        phone_clean = user_phone.replace('+', '').replace(' ', '').replace('-', '')
        return self.conversations_dir / f"conv_{phone_clean}.json"
    
    def load_conversation_history(self, user_phone: str) -> List[Dict]:
        """Carregar hist√≥rico de conversa do usu√°rio."""
        conv_file = self.get_conversation_file(user_phone)
        
        if conv_file.exists():
            try:
                with open(conv_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('messages', [])
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar hist√≥rico: {e}")
                return []
        
        return []
    
    def save_conversation_history(self, user_phone: str, messages: List[Dict]):
        """Salvar hist√≥rico de conversa do usu√°rio."""
        conv_file = self.get_conversation_file(user_phone)
        
        try:
            data = {
                'user_phone': user_phone,
                'messages': messages,
                'last_updated': datetime.now().isoformat()
            }
            
            with open(conv_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar hist√≥rico: {e}")
    
    def format_conversation_for_ai(self, messages: List[Dict]) -> str:
        """Formatar hist√≥rico de conversa para enviar √† IA."""
        formatted = "=== HIST√ìRICO DE CONVERSA ===\n\n"
        
        for msg in messages[-10:]:  # √öltimas 10 mensagens
            role = msg.get('role', 'user')
            content = msg.get('content', '')
            timestamp = msg.get('timestamp', '')
            
            if role == 'user':
                formatted += f"üë§ Vendedor ({timestamp}): {content}\n"
            else:
                formatted += f"ü§ñ IA ({timestamp}): {content}\n"
        
        formatted += "\n=== FIM DO HIST√ìRICO ===\n"
        return formatted
    
    def generate_system_prompt(self) -> str:
        """Gerar system prompt para o vendedor."""
        return """Voc√™ √© um assistente de IA para VENDEDORES. Seu objetivo √© ajudar vendedores a:
1. Qualificar leads
2. Preparar argumentos de venda
3. Responder perguntas de clientes
4. Agendar reuni√µes
5. Enviar propostas

REGRAS:
- Seja breve e direto
- Use linguagem profissional mas amig√°vel
- Forne√ßa sugest√µes pr√°ticas
- Pergunte sempre para confirmar pr√≥ximos passos
- Se mencionar um cliente, tente extrair: nome, telefone, empresa, interesse
- Resuma decis√µes importantes

Responda em portugu√™s brasileiro, de forma concisa (m√°ximo 500 caracteres)."""
    
    def _generate_fallback_response(self, user_message: str) -> str:
        """Gerar resposta autom√°tica baseada em palavras-chave."""
        msg_lower = user_message.lower()
        
        # Dicion√°rio de respostas por contexto
        if any(word in msg_lower for word in ['pre√ßo', 'custo', 'valor', 'caro', 'custa']):
            return """Bom ponto! Aqui est√£o estrat√©gias para tratar obje√ß√£o de pre√ßo:

1Ô∏è‚É£ **Foque no ROI**: "Este investimento traz X% de retorno em Y meses"
2Ô∏è‚É£ **Compare valor**: "Versus concorrente Z, temos mais recursos"
3Ô∏è‚É£ **Parcelamento**: "Podemos oferecer 3-12x sem juros"
4Ô∏è‚É£ **Prova social**: "Clientes similares economizaram 40%"

Qual desses argumentos combina com seu cliente?"""
        
        elif any(word in msg_lower for word in ['parcelado', 'parcelament', 'pagar', 'pagamento', 'condi√ß√£o']):
            return """√ìtima pergunta sobre condi√ß√µes de pagamento!

üí≥ **Op√ß√µes recomendadas**:
- √Ä vista: -10% de desconto
- 3x: sem juros
- 6x at√© 12x: taxa de 2% a.m
- Customizado: para grandes volumes

üìû Dica: Ofere√ßa sempre 2-3 op√ß√µes. Deixe o cliente escolher = maior chance de fechar.

Qual √© o investimento total?"""
        
        elif any(word in msg_lower for word in ['agenda', 'reuni√£o', 'marcar', 'agendar', 'hor√°rio']):
            return """Perfeito! Hora de agendar:

üìÖ **Passo a passo**:
1. Confirme nome + telefone do cliente
2. Sugira 2-3 hor√°rios (n√£o pergunte "quando voc√™ quer?")
3. Envie link do calendario ou WhatsApp direto
4. Confirme 1h antes da reuni√£o

üéØ Dica: Reuni√µes com dia/hora espec√≠fica t√™m 70% mais taxa de presen√ßa.

Qual √© o pr√≥ximo passo com seu cliente?"""
        
        elif any(word in msg_lower for word in ['cliente', 'prospect', 'lead', 'contato', 'pessoa']):
            return """√ìtimo! Vamos qualificar esse contato:

‚ùì **Perguntas importantes**:
1. Nome completo + empresa?
2. Or√ßamento aproximado?
3. Quando precisa/quando quer decidir?
4. Quem mais precisa estar na conversa?
5. Qual problema ele quer resolver?

üìä Quanto mais info voc√™ tem = melhor sua proposta.

Me conta mais sobre esse cliente!"""
        
        elif any(word in msg_lower for word in ['proposta', 'cota√ß√£o', 'or√ßamento', 'quote']):
            return """Vamos estruturar a proposta:

üìã **Elementos essenciais**:
1. Resumo executivo (o que ele vai ganhar)
2. Solu√ß√£o customizada (para o DELE)
3. Pre√ßo + condi√ß√µes (simples e claro)
4. Timeline de implementa√ß√£o
5. ROI + pr√≥ximos passos

‚ö° Dica: Proposta de 1 p√°gina √© 3x melhor que 10 p√°ginas.

Qual √© o produto/servi√ßo que voc√™ vende?"""
        
        elif any(word in msg_lower for word in ['obje√ß√£o', 'problema', 'dificuldade', 'n√£o quer', 'recusa']):
            return """Todo "n√£o" √© oportunidade! üéØ

**Framework para vencer obje√ß√µes**:

1Ô∏è‚É£ **ESCUTE**: Deixe falar at√© o final
2Ô∏è‚É£ **EMPATIZE**: "Entendo sua preocupa√ß√£o"
3Ô∏è‚É£ **EXPLORE**: "Me conta mais sobre..."
4Ô∏è‚É£ **PIVOTE**: Mude de √¢ngulo/benef√≠cio
5Ô∏è‚É£ **PROPONHA**: "E se fiz√©ssemos assim..."

Qual √© a obje√ß√£o exatamente?"""
        
        else:
            # Resposta gen√©rica
            return """Entendi! üìù

Para ajudar melhor, preciso saber:
- Est√° em qual etapa da venda? (prospecting, apresenta√ß√£o, fechamento)
- Qual √© o principal desafio agora?
- Qual produto/servi√ßo voc√™ vende?

Digite seus detalhes e vou te dar uma estrat√©gia pr√°tica! üí°"""
    
    def chat(self, user_phone: str, user_message: str) -> Optional[str]:
        """Processar mensagem do usu√°rio e gerar resposta."""
        
        # Carregar hist√≥rico
        messages = self.load_conversation_history(user_phone)
        
        # Adicionar nova mensagem do usu√°rio
        messages.append({
            'role': 'user',
            'content': user_message,
            'timestamp': datetime.now().isoformat()
        })
        
        # Usar fallback response (sem IA para evitar JSON estruturado)
        # O ai_client retorna JSON estruturado para CRM, n√£o √© apropriado para chat
        response_text = self._generate_fallback_response(user_message)
        
        # Se ainda estiver muito longo, truncar
        if len(response_text) > 500:
            response_text = response_text[:497] + "..."
        
        # Adicionar resposta ao hist√≥rico
        messages.append({
            'role': 'assistant',
            'content': response_text,
            'timestamp': datetime.now().isoformat()
        })
        
        # Salvar hist√≥rico atualizado
        self.save_conversation_history(user_phone, messages)
        
        return response_text
    
    def get_conversation_summary(self, user_phone: str) -> Optional[str]:
        """Obter resumo da conversa com um usu√°rio."""
        messages = self.load_conversation_history(user_phone)
        
        if not messages:
            return "Nenhuma conversa registrada"
        
        summary = f"""üìä RESUMO DA CONVERSA COM {user_phone}
Mensagens: {len(messages)}
√öltima atualiza√ß√£o: {datetime.now().isoformat()}

√öltimas 3 mensagens:
"""
        
        for msg in messages[-3:]:
            role = "Vendedor" if msg.get('role') == 'user' else "IA"
            content = msg.get('content', '')[:100]
            summary += f"\n{role}: {content}..."
        
        return summary
    
    def clear_conversation(self, user_phone: str) -> bool:
        """Limpar hist√≥rico de conversa (come√ßar do zero)."""
        conv_file = self.get_conversation_file(user_phone)
        
        try:
            if conv_file.exists():
                conv_file.unlink()
            return True
        except Exception as e:
            print(f"‚ùå Erro ao limpar conversa: {e}")
            return False


class ChatbotManager:
    """Gerenciador central de chatbots."""
    
    def __init__(self):
        self.chatbot = VendedorChatbot()
    
    def processar_mensagem_whatsapp(self, phone_number: str, message_text: str) -> str:
        """Processar mensagem WhatsApp e retornar resposta."""
        
        # Verificar comandos especiais
        if message_text.lower() == '/limpar':
            self.chatbot.clear_conversation(phone_number)
            return "‚úÖ Hist√≥rico limpo. Nova conversa iniciada!"
        
        if message_text.lower() == '/resumo':
            return self.chatbot.get_conversation_summary(phone_number)
        
        # Processar como mensagem normal
        response = self.chatbot.chat(phone_number, message_text)
        return response or "Desculpe, n√£o consegui processar sua mensagem"


# Teste
if __name__ == "__main__":
    print("=== TESTE VENDEDOR CHATBOT ===\n")
    
    manager = ChatbotManager()
    
    # Simular conversa
    test_phone = "+556596063938"
    
    test_messages = [
        "Oi, tudo bem? Eu tenho um cliente interessado em comprar mas est√° em d√∫vida no pre√ßo",
        "Qual √© o melhor argumento pra vencer essa obje√ß√£o?",
        "Ok, e se o cliente quiser pagamento parcelado?",
    ]
    
    for msg in test_messages:
        print(f"üë§ Vendedor: {msg}")
        response = manager.processar_mensagem_whatsapp(test_phone, msg)
        print(f"ü§ñ IA: {response}\n")
        print("-" * 60 + "\n")
    
    print("\n=== RESUMO DA CONVERSA ===")
    summary = manager.processar_mensagem_whatsapp(test_phone, "/resumo")
    print(summary)
